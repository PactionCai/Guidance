1.滑动窗口
https://leetcode-cn.com/problems/permutation-in-string/

bool checkInclusion(char * s1, char * s2)
{
	int stack1[26] = {0};
	size_t len1 = strlen(s1);
	for (int i = 0; i < len1; ++i) {
		stack1[s1[i] - 'a'] ++;
	}

	int stack2[26] = {0};
	size_t len2 = strlen(s2);
	for (int i = 0; i < len2; ++i) {
		stack2[s2[i] - 'a'] ++;
		if (len1 <= i) {
			stack2[s2[i - len1] - 'a'] --;
		}
		if (memcmp(stack1, stack2, sizeof(stack1)) == 0) {
			return true;
		}
	}
	return false;
}

2. 深度优先搜索
https://leetcode-cn.com/problems/number-of-islands/

int dfs(char** grid, int xMax, int yMax, int x, int y)
{
    if (grid[y][x] == '0') {
        return 0;
    }
    grid[y][x] = '0';
    if (0 <= y - 1 && grid[y - 1][x] == '1') {
        dfs(grid, xMax, yMax, x, y - 1);
    }
    if (y + 1 <= yMax && grid[y + 1][x] == '1') {
        dfs(grid, xMax, yMax, x, y + 1);
    }
    if (0 <= x - 1 && grid[y][x - 1] == '1') {
        dfs(grid, xMax, yMax, x - 1, y);
    }
    if (x + 1 <= xMax && grid[y][x + 1] == '1') {
        dfs(grid, xMax, yMax, x + 1, y);
    }
    return 0;
}

int numIslands(char** grid, int gridSize, int* gridColSize)
{
    int count = 0;
    for (int y = 0; y < gridSize; ++y) {
        for (int x = 0; x < gridColSize[0]; ++x) {
            count += dfs(grid, gridColSize[0] - 1, gridSize - 1, x, y);
        }
    }
    return count;
}

3. N皇后
https://leetcode-cn.com/problems/n-queens

bool isValid(char **board, int n, int row, int col) {
    for (int i = row - 1; i >= 0; i--) {  //向上查找
        if (board[i][col] == 'Q') {
            return false;
        }
    }
    for (int i = row - 1; i >= 0 && col - row + i >= 0; i--) {  //左斜上查找
        if (board[i][col - row + i] == 'Q') {
            return false;
        }
    }
    for (int i = row - 1; i >= 0 && col + row - i < n; i--) {  //右斜上查找
        if (board[i][col + row - i] == 'Q') {
            return false;
        }
    }
    return true;
}

void dfs(int n, int row, char **board, char ***res, int *returnSize, int **returnColumnSizes) {
    if (row == n) {  //遍历结束进行输出
        res[*returnSize] = (char**)malloc(sizeof(char*) * n);
        for (int i = 0; i < n; i++) {
            res[*returnSize][i] = (char*)malloc(sizeof(char) * (n + 1));
            strcpy(res[*returnSize][i], board[i]);
        }
        (*returnColumnSizes)[(*returnSize)++] = n;
        return;
    }
    for (int i = 0; i < n; i++) {  //判断每一列是否可以放置Q
        if (isValid(board, n, row, i) == true) {
            board[row][i] = 'Q'; //放置Q
            dfs(n, row + 1, board, res, returnSize, returnColumnSizes);
            board[row][i] = '.'; //回溯
        }
    }
    return;
}

char *** solveNQueens(int n, int* returnSize, int** returnColumnSizes){
    char **board = (char**)malloc(sizeof(char*) * n);
    char ***res  = (char***)malloc(sizeof(char**) * 1000);
    *returnColumnSizes = (int*)malloc(sizeof(int) * 1000);
    *returnSize  = 0;
    for (int i = 0; i < n; i++) {  //生成棋盘面板
        board[i] = (char*)malloc(sizeof(char) * (n + 1));
        memset(board[i], '.', sizeof(char) * n);
        board[i][n] = '\0';
    }
    dfs(n, 0, board, res, returnSize, returnColumnSizes);
    return res;
}